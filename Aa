from flask import Flask, render_template, request, jsonify
import requests

app = Flask(__name__)

# Bitbucket Server (Stash) Details
BASE_URL = "https://xyz.abc.com"  # Change to your actual server
AUTH_TOKEN = "BE2234434343CDD"  # Your actual token
HEADERS = {"Authorization": f"Bearer {AUTH_TOKEN}", "Accept": "application/json"}

@app.route("/")
def index():
    return render_template("index.html")  # HTML Form to input project & search text

@app.route("/search", methods=["POST"])
def search():
    project_name = request.form.get("project_name", "").strip()
    search_text = request.form.get("search_text", "").strip()

    if not search_text:
        return jsonify({"error": "Search text is required!"}), 400

    matched_files = []

    if project_name:
        # Search inside a specific project
        matched_files = search_in_project(project_name, search_text)
    else:
        # Search in all repositories (scan everything)
        matched_files = search_in_all_projects(search_text)

    if matched_files:
        return jsonify({"matched_files": matched_files})
    else:
        return jsonify({"message": "No matching files found!"})

def search_in_project(project_name, search_text):
    """Search for text inside a specific project's repositories."""
    matched_files = []
    
    repo_url = f"{BASE_URL}/projects/CND/repos/{project_name}/browse"
    response = requests.get(repo_url, headers=HEADERS)

    if response.status_code == 200:
        files = extract_files(response.json())
        for file in files:
            if check_text_in_file(project_name, file, search_text):
                matched_files.append(file)
    else:
        print(f"Error: Unable to fetch {repo_url} | Status: {response.status_code}")

    return matched_files

def search_in_all_projects(search_text):
    """Search for text inside all repositories under a project."""
    matched_files = []
    project_list_url = f"{BASE_URL}/rest/api/1.0/projects/CND/repos"
    
    response = requests.get(project_list_url, headers=HEADERS)

    if response.status_code == 200:
        repositories = response.json().get("values", [])
        for repo in repositories:
            repo_name = repo["slug"]
            matched_files.extend(search_in_project(repo_name, search_text))
    else:
        print(f"Error fetching repositories: {response.status_code}")

    return matched_files

def extract_files(data):
    """Extract file paths from API response."""
    return [file["path"]["toString"] for file in data.get("children", {}).get("values", [])]

def check_text_in_file(project_name, file_path, search_text):
    """Check if search_text is present in a given file."""
    file_url = f"{BASE_URL}/projects/CND/repos/{project_name}/browse/{file_path}"
    
    response = requests.get(file_url, headers=HEADERS)
    
    if response.status_code == 200:
        file_content = response.text
        return search_text.lower() in file_content.lower()
    return False

if __name__ == "__main__":
    app.run(debug=True)
