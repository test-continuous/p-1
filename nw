def scan_repository(repo_url, search_text):
    """ Scan files in a repository for the given text pattern. """
    matched_files = []
    
    try:
        response = requests.get(repo_url, headers=HEADERS, verify=False)
        
        # Check if response is valid JSON
        if response.status_code != 200:
            print(f"Error: Failed to fetch files from {repo_url} - Status Code: {response.status_code}")
            return []

        try:
            files = response.json().get("values", [])  # Extract file list
        except ValueError:
            print(f"Error: Invalid JSON response from {repo_url}")
            return []

        for file in files:
            file_url = file["links"]["self"][0]["href"]
            file_response = requests.get(file_url, headers=HEADERS, verify=False)

            if file_response.status_code == 200:
                file_content = file_response.text
                if re.search(search_text, file_content, re.IGNORECASE):
                    matched_files.append(file_url)
            else:
                print(f"Warning: Could not fetch file {file_url} - Status: {file_response.status_code}")

    except Exception as e:
        print(f"Exception while scanning repository: {e}")
    
    return matched_files










from flask import Flask, render_template, request, jsonify
import requests

app = Flask(__name__)

# Configuration - Replace with actual API details
LIST_REPOS_API = "https://your-api-endpoint.com/list-repositories"
AUTH_HEADERS = {"Authorization": "Bearer YOUR_ACCESS_TOKEN"}

def get_repositories():
    """Fetch the list of project repositories using the provided API."""
    response = requests.get(LIST_REPOS_API, headers=AUTH_HEADERS)
    if response.status_code == 200:
        return response.json().get("values", [])
    return None

def search_in_repository(repo_name, search_text):
    """Search for a specific text in the given repository."""
    url = f"https://your-api-endpoint.com/repositories/{repo_name}/files"
    response = requests.get(url, headers=AUTH_HEADERS)
    
    matching_files = []
    if response.status_code == 200:
        files = response.json().get("values", [])
        for file in files:
            file_path = file["path"]
            file_content_url = f"https://your-api-endpoint.com/repositories/{repo_name}/files/{file_path}"
            file_response = requests.get(file_content_url, headers=AUTH_HEADERS)
            
            if file_response.status_code == 200 and search_text in file_response.text:
                matching_files.append(file_path)
    
    return matching_files

@app.route("/", methods=["GET"])
def index():
    return render_template("index.html")

@app.route("/search", methods=["POST"])
def search():
    project_name = request.form["project_name"]
    search_text = request.form["search_text"]
    
    repositories = get_repositories()
    if not repositories:
        return render_template("results.html", error="No repositories found.", results=None)
    
    results = {}
    for repo in repositories:
        if project_name.lower() in repo["slug"].lower():
            matching_files = search_in_repository(repo["slug"], search_text)
            if matching_files:
                results[repo["slug"]] = matching_files
    
    return render_template("results.html", results=results)

if __name__ == "__main__":
    app.run(debug=True)


<!-- index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bitbucket Repository Search</title>
</head>
<body>
    <h2>Search in Bitbucket Repositories</h2>
    <form action="/search" method="post">
        <label for="project_name">Project Name:</label>
        <input type="text" id="project_name" name="project_name" required>
        <br>
        <label for="search_text">Text to Search:</label>
        <input type="text" id="search_text" name="search_text" required>
        <br>
        <button type="submit">Search</button>
    </form>
</body>
</html>

<!-- results.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Search Results</title>
</head>
<body>
    <h2>Search Results</h2>
    {% if error %}
        <p style="color: red;">{{ error }}</p>
    {% elif results %}
        <ul>
            {% for repo, files in results.items() %}
                <li><strong>{{ repo }}</strong>
                    <ul>
                        {% for file in files %}
                            <li>{{ file }}</li>
                        {% endfor %}
                    </ul>
                </li>
            {% endfor %}
        </ul>
    {% else %}
        <p>No matching results found.</p>
    {% endif %}
    <br>
    <a href="/">Back to Search</a>
</body>
</html>
