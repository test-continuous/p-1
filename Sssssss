function check_yaml_content { local project_name="$1" local file_path="$2" local file_url="$API_URL/$project_name/browse/$file_path"

# Fetch file content
file_content=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                      -H "Content-Type: application/json" \
                      "$file_url")

# Check if file contains 'statefulset'
if [[ "$file_content" != *"statefulset"* ]]; then
    return
fi

# Check for predefined name-value pairs
declare -a required_pairs=(
    "- name: value1" "- value: value1"
    "- name: value2" "- value: value2"
    "- name: value3" "- value: value3"
    "- name: value4" "- value: value4"
    "- name: value5" "- value: value5"
    "- name: value6" "- value: value6"
)

for pair in "${required_pairs[@]}"; do
    if [[ "$file_content" != *"$pair"* ]]; then
        echo "‚ùå Content Not Available: $file_url"
        return
    fi
done

echo "‚úÖ Content Available: $file_url"

}

function search_in_directory { local project_name="$1" local base_path="$2" local pattern="$3"

echo "Searching under: $API_URL/$project_name/browse/$base_path"

# Fetch folder & file list **only once** to reduce API calls
response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                  -H "Content-Type: application/json" \
                  "$API_URL/$project_name/browse/$base_path")

if [[ "$response" == *"errors"* ]]; then
    echo "Skipping: $base_path (not found)"
    return
fi

# Extract directory and file names **efficiently**
items=($(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'))

for item in "${items[@]}"; do
    full_path="$base_path/$item"

    # Check if the item is a **YAML file** and matches the pattern
    if [[ "$item" == *"$pattern"* ]] && [[ "$item" =~ \.ya?ml$ ]]; then
        check_yaml_content "$project_name" "$full_path"
    fi
    
    # If it's a directory, recursively search inside it (Run in Parallel)
    if [[ ! "$item" =~ \. ]]; then
        search_in_directory "$project_name" "$full_path" "$pattern" &
    fi
done

# Wait for all background jobs before returning
wait

}

Function to explore all directories inside k8s/envs/pr/

function search_pr_folders { local project_name="$1" local pattern="$2" local base_path="k8s/envs/pr"

echo "Fetching data from: $API_URL/$project_name/browse/$base_path"

response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                  -H "Content-Type: application/json" \
                  "$API_URL/$project_name/browse/$base_path")

if [[ "$response" == *"errors"* ]]; then
    echo "Base path does not exist: $base_path"
    return
fi

# Extract all first-level folders
folders=($(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'))

for folder in "${folders[@]}"; do
    folder_path="$base_path/$folder"
    echo "üîç Exploring: $folder_path"

    # Recursively search **in parallel** for each folder
    search_in_directory "$project_name" "$folder_path" "$pattern" &
done

# Wait for all parallel jobs
wait

}
-------

#!/bin/bash

Define API credentials and base URL

API_URL="https://serverstash.server.com/rest/api1.0/projects/ABC/repos" AUTH_TOKEN="BE2234434343CDD"

Predefined name-value pairs to check inside YAML files

REQUIRED_PAIRS=( "- name: example-name1" "- value: example-value1" "- name: example-name2" "- value: example-value2" "- name: example-name3" "- value: example-value3" )

Function to fetch and check YAML file content

function check_yaml_content { local project_name="$1" local file_path="$2"

# Fetch file content
content=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                -H "Content-Type: application/json" \
                "$API_URL/$project_name/raw/$file_path")

# Check if all predefined pairs exist in the content
for pair in "${REQUIRED_PAIRS[@]}"; do
    if ! grep -q "$pair" <<< "$content"; then
        echo "‚ùå Content Not Available in: $file_path"
        return
    fi
done
echo "‚úÖ Content Available in: $file_path"

}

Function to search for matching YAML files containing 'statefulset'

function search_yaml_files { local project_name="$1" local base_path="$2" local pattern="$3"

response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                  -H "Content-Type: application/json" \
                  "$API_URL/$project_name/browse/$base_path")

if [[ "$response" == *"errors"* ]]; then
    return
fi

files=($(echo "$response" | grep -o '"name":"[^"]*\.yaÓÄÅmlÓÄÅ"' | sed -E 's/"name":"([^"]+)"/\1/'))

for file in "${files[@]}"; do
    if [[ "$file" == *"$pattern"* ]]; then
        # Fetch the file content to check for 'statefulset'
        file_content=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                              -H "Content-Type: application/json" \
                              "$API_URL/$project_name/raw/$base_path/$file")
        
        if [[ "$file_content" == *"statefulset"* ]]; then
            echo "üîç Found matching file: $API_URL/$project_name/browse/$base_path/$file"
            check_yaml_content "$project_name" "$base_path/$file"
        fi
    fi
done

}

Recursive function to explore directories

function search_in_directory { local project_name="$1" local base_path="$2" local pattern="$3"

response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                  -H "Content-Type: application/json" \
                  "$API_URL/$project_name/browse/$base_path")

if [[ "$response" == *"errors"* ]]; then
    return
fi

directories=($(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'))

for dir in "${directories[@]}"; do
    full_path="$base_path/$dir"
    search_yaml_files "$project_name" "$full_path" "$pattern" &
    search_in_directory "$project_name" "$full_path" "$pattern" &
done
wait

}

Function to start search inside k8s/envs/pr/

function search_pr_folders { local project_name="$1" local pattern="$2" local base_path="k8s/envs/pr"

response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                  -H "Content-Type: application/json" \
                  "$API_URL/$project_name/browse/$base_path")

if [[ "$response" == *"errors"* ]]; then
    echo "Base path does not exist: $base_path"
    return
fi

folders=($(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'))

for folder in "${folders[@]}"; do
    search_in_directory "$project_name" "$base_path/$folder" "$pattern" &
done
wait

}

Prompt user for input

read -p "Enter the project name: " project_name read -p "Enter the pattern to search for in YAML files: " pattern

search_pr_folders "$project_name" "$pattern"

