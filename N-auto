#!/bin/bash

# Define API credentials and base URL
API_URL="https://serverstash.server.com/rest/api1.0/projects/ABC/repos"
AUTH_TOKEN="BE2234434343CDD"
LIMIT=100
START=0
COUNT=1
declare -a REPOS

# Function to search inside promotable folders
function search_promotable {
    local project_name="$1"
    local pattern="$2"
    local base_path="k8s/envs/dv/usc1"

    echo "Searching under: $API_URL/$project_name/browse/$base_path"

    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                      -H "Content-Type: application/json" \
                      "$API_URL/$project_name/browse/$base_path")

    echo "API Response: $response"  # Debugging

    if echo "$response" | jq -e '.errors' > /dev/null; then
        echo "Base path does not exist: $base_path"
        return
    fi

    # Extract app directories correctly
    app_dirs=($(echo "$response" | jq -r '.children.values[] | select(.type == "DIRECTORY" and .path.name | test("^app-")) | .path.name'))

    echo "Found app directories: ${app_dirs[@]}"

    if [ ${#app_dirs[@]} -eq 0 ]; then
        echo "No app directories found under $base_path."
        return
    fi

    # Loop through found app directories
    for app_dir in "${app_dirs[@]}"; do
        promotable_path="$base_path/$app_dir/promotable"
        echo "Checking promotable folder: $promotable_path"

        promo_response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                               -H "Content-Type: application/json" \
                               "$API_URL/$project_name/browse/$promotable_path")

        echo "Promotable API Response: $promo_response"  # Debugging

        if ! echo "$promo_response" | jq -e '.errors' > /dev/null; then
            promo_subdirs=($(echo "$promo_response" | jq -r '.children.values[] | select(.directory == true) | .path.name'))
            
            for promo_subdir in "${promo_subdirs[@]}"; do
                if [[ "$promo_subdir" =~ $pattern ]]; then
                    echo "Match found: $API_URL/$project_name/browse/$promotable_path/$promo_subdir"
                fi
            done
        else
            echo "No promotable folder found in $app_dir"
        fi
    done
}

# Fetch all repositories
echo "Fetching all sub-repositories..."

while true; do
    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                      -H "Content-Type: application/json" \
                      "$API_URL?limit=$LIMIT&start=$START")

    for repo_name in $(echo "$response" | jq -r '.values[].name'); do
        echo "$COUNT. $repo_name"
        REPOS+=("$repo_name")
        ((COUNT++))
    done

    is_last_page=$(echo "$response" | jq -r '.isLastPage')
    if [ "$is_last_page" == "true" ]; then
        break
    fi

    START=$(echo "$response" | jq -r '.nextPageStart')
done

echo "Total repositories listed: $((COUNT - 1))"

read -p "Enter the project name you want to search for: " project_name

if [[ " ${REPOS[@]} " =~ " $project_name " ]]; then
    echo "Yes, found it!"
    
    read -p "Enter the pattern to search inside 'promotable' folder: " pattern

    search_promotable "$project_name" "$pattern"
else
    echo "No such project found."
fi


--_-----
#!/bin/bash

# Define API credentials and base URL
API_URL="https://serverstash.server.com/rest/api1.0/projects/ABC/repos"
AUTH_TOKEN="BE2234434343CDD"
LIMIT=100  # Number of repositories per request
START=0    # Pagination start index
COUNT=1    # Counter for numbering repositories
declare -a REPOS  # Array to store repository names

# Function to search inside promotable folders
function search_promotable {
    local project_name="$1"
    local pattern="$2"
    local base_path="k8s/envs/dv/usc1"  # Base path to start searching

    echo "Searching under: $API_URL/$project_name/browse/$base_path"

    # Get list of all directories inside 'usc1'
    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                      -H "Content-Type: application/json" \
                      "$API_URL/$project_name/browse/$base_path")

    # Debug: Print API response
    echo "API Response: $response"

    # Check if response contains errors
    if echo "$response" | jq -e '.errors' > /dev/null; then
        echo "Base path does not exist: $base_path"
        return
    fi

    # Extract directories that start with "app-"
    app_dirs=($(echo "$response" | jq -r '.children.values[] | select(.directory == true and .path.name | test("^app-")) | .path.name'))

    # Debug: Print extracted app directories
    echo "Found app directories: ${app_dirs[@]}"

    if [ ${#app_dirs[@]} -eq 0 ]; then
        echo "No app directories found under $base_path."
        return
    fi

    # Loop through all app-id directories
    for app_dir in "${app_dirs[@]}"; do
        promotable_path="$base_path/$app_dir/promotable"
        echo "Checking promotable folder: $promotable_path"

        # Fetch contents of promotable folder
        promo_response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                               -H "Content-Type: application/json" \
                               "$API_URL/$project_name/browse/$promotable_path")

        # Debug: Print promotable folder response
        echo "Promotable API Response: $promo_response"

        # If 'promotable' exists, check for matching subdirectories
        if ! echo "$promo_response" | jq -e '.errors' > /dev/null; then
            promo_subdirs=($(echo "$promo_response" | jq -r '.children.values[] | select(.directory == true) | .path.name'))
            
            for promo_subdir in "${promo_subdirs[@]}"; do
                if [[ "$promo_subdir" =~ $pattern ]]; then
                    echo "Match found: $API_URL/$project_name/browse/$promotable_path/$promo_subdir"
                fi
            done
        else
            echo "No promotable folder found in $app_dir"
        fi
    done
}

echo "Fetching all sub-repositories..."

# Fetch all repositories
while true; do
    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                      -H "Content-Type: application/json" \
                      "$API_URL?limit=$LIMIT&start=$START")

    # Extract repository names
    for repo_name in $(echo "$response" | jq -r '.values[].name'); do
        echo "$COUNT. $repo_name"
        REPOS+=("$repo_name")  # Store repo in array
        ((COUNT++))
    done

    # Check if there are more pages
    is_last_page=$(echo "$response" | jq -r '.isLastPage')
    if [ "$is_last_page" == "true" ]; then
        break
    fi

    START=$(echo "$response" | jq -r '.nextPageStart')
done

echo "Total repositories listed: $((COUNT - 1))"

# Ask user for a project name
read -p "Enter the project name you want to search for: " project_name

# Check if project exists in the fetched list
if [[ " ${REPOS[@]} " =~ " $project_name " ]]; then
    echo "Yes, found it!"
    
    # Ask user for a pattern to search in 'promotable' folders
    read -p "Enter the pattern to search inside 'promotable' folder: " pattern

    # Call the function to search in promotable folders
    search_promotable "$project_name" "$pattern"

else
    echo "No such project found."
fi




------
#!/bin/bash

# Define API credentials and base URL
API_URL="https://serverstash.server.com/rest/api1.0/projects/ABC/repos"
AUTH_TOKEN="BE2234434343CDD"
LIMIT=100  # Number of repositories per request
START=0    # Pagination start index
COUNT=1    # Counter for numbering repositories
declare -a REPOS  # Array to store repository names

echo "Fetching all sub-repositories..."

# Fetch all repositories
while true; do
    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                      -H "Content-Type: application/json" \
                      "$API_URL?limit=$LIMIT&start=$START")

    # Extract repository names
    for repo_name in $(echo "$response" | jq -r '.values[].name'); do
        echo "$COUNT. $repo_name"
        REPOS+=("$repo_name")  # Store repo in array
        ((COUNT++))
    done

    # Check if there are more pages
    is_last_page=$(echo "$response" | jq -r '.isLastPage')
    if [ "$is_last_page" == "true" ]; then
        break
    fi

    START=$(echo "$response" | jq -r '.nextPageStart')
done

echo "Total repositories listed: $((COUNT - 1))"

# Ask user for a project name
read -p "Enter the project name you want to search for: " project_name

# Check if project exists in the fetched list
if [[ " ${REPOS[@]} " =~ " $project_name " ]]; then
    echo "Yes, found it!"
    
    # Ask user for a pattern to search in 'promotable' folders
    read -p "Enter the pattern to search inside 'promotable' folder: " pattern

    # Call the function to search in promotable folders
    search_promotable "$project_name" "$pattern"

else
    echo "No such project found."
fi

# Function to search in promotable folders
function search_promotable {
    local project_name="$1"
    local pattern="$2"
    local base_path="k8s/envs/dv/usc1"  # Base path to start searching

    echo "Searching under: $API_URL/$project_name/browse/$base_path"

    # Get list of all app-* directories
    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                      -H "Content-Type: application/json" \
                      "$API_URL/$project_name/browse/$base_path")

    # Check if response contains errors
    if echo "$response" | jq -e '.errors' > /dev/null; then
        echo "Base path does not exist: $base_path"
        return
    fi

    # Extract all directories (app-ids like app-1203, app-1753)
    app_dirs=($(echo "$response" | jq -r '.children.values[] | select(.directory == true) | .path.toString'))

    # Debug: Print extracted app directories
    echo "Found app directories: ${app_dirs[@]}"

    if [ ${#app_dirs[@]} -eq 0 ]; then
        echo "No app directories found under $base_path."
        return
    fi

    # Loop through all app-id directories
    for app_dir in "${app_dirs[@]}"; do
        promotable_path="$base_path/$app_dir/promotable"
        echo "Checking promotable folder: $promotable_path"

        # Fetch contents of promotable folder
        promo_response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                               -H "Content-Type: application/json" \
                               "$API_URL/$project_name/browse/$promotable_path")

        # Debug: Print promotable folder response
        echo "Promotable API Response: $promo_response"

        # If 'promotable' exists, check for matching subdirectories
        if ! echo "$promo_response" | jq -e '.errors' > /dev/null; then
            promo_subdirs=($(echo "$promo_response" | jq -r '.children.values[] | select(.directory == true) | .path.toString'))
            
            for promo_subdir in "${promo_subdirs[@]}"; do
                if [[ "$promo_subdir" =~ $pattern ]]; then
                    echo "Match found: $API_URL/$project_name/browse/$promotable_path/$promo_subdir"
                fi
            done
        else
            echo "No promotable folder found in $app_dir"
        fi
    done
}

--------
function search_promotable {
    local base_path="k8s/envs/dv/usc1"  # Base path to start searching
    echo "Searching under: $API_URL/$project_name/browse/$base_path"

    # Get list of all app-* directories
    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                      -H "Content-Type: application/json" \
                      "$API_URL/$project_name/browse/$base_path")

    # Check if response contains errors
    if echo "$response" | jq -e '.errors' > /dev/null; then
        echo "Base path does not exist: $base_path"
        return
    fi

    # Extract all directories (app-ids like app-1203, app-1753)
    app_dirs=($(echo "$response" | jq -r '.children.values[] | select(.directory == true) | .path.toString'))

    # Debug: Print extracted app directories
    echo "Found app directories: ${app_dirs[@]}"

    if [ ${#app_dirs[@]} -eq 0 ]; then
        echo "No app directories found under $base_path."
        return
    fi

    # Loop through all app-id directories
    for app_dir in "${app_dirs[@]}"; do
        promotable_path="$base_path/$app_dir/promotable"
        echo "Checking promotable folder: $promotable_path"

        # Fetch contents of promotable folder
        promo_response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                               -H "Content-Type: application/json" \
                               "$API_URL/$project_name/browse/$promotable_path")

        # Debug: Print promotable folder response
        echo "Promotable API Response: $promo_response"

        # If 'promotable' exists, check for matching subdirectories
        if ! echo "$promo_response" | jq -e '.errors' > /dev/null; then
            promo_subdirs=($(echo "$promo_response" | jq -r '.children.values[] | select(.directory == true) | .path.toString'))
            
            for promo_subdir in "${promo_subdirs[@]}"; do
                if [[ "$promo_subdir" =~ $pattern ]]; then
                    echo "Match found: $API_URL/$project_name/browse/$promotable_path/$promo_subdir"
                fi
            done
        else
            echo "No promotable folder found in $app_dir"
        fi
    done
}
