#!/bin/bash

Define API credentials and base URL

API_URL="https://serverstash.server.com/rest/api1.0/projects/ABC/repos" AUTH_TOKEN="BE2234434343CDD" LIMIT=100  # Number of repositories per request START=0    # Pagination start index declare -a REPOS  # Array to store repository names

echo "Fetching all sub-repositories..."

Fetch all repositories

while true; do response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" 
-H "Content-Type: application/json" 
"$API_URL?limit=$LIMIT&start=$START")

for repo_name in $(echo "$response" | jq -r '.values[].name'); do
    echo "$repo_name"
    REPOS+=("$repo_name")  # Store repo in array
done

is_last_page=$(echo "$response" | jq -r '.isLastPage')
if [ "$is_last_page" == "true" ]; then
    break
fi

START=$(echo "$response" | jq -r '.nextPageStart')

done

echo "Total repositories listed: ${#REPOS[@]}"

Ask user for a project name

read -p "Enter the project name you want to search for: " project_name

Check if project exists in the fetched list

if [[ " ${REPOS[@]} " =~ " $project_name " ]]; then echo "Yes, found it!"

# Ask user for pattern input
read -p "Enter the search pattern for folder names: " pattern

# Define base directory dynamically
BASE_PATH="/path/to/repos/$project_name/browse"
if [ ! -d "$BASE_PATH" ]; then
    echo "Error: Base path $BASE_PATH does not exist!"
    exit 1
fi

# Search for the full path dynamically
TARGET_PATH=$(find "$BASE_PATH" -type d -path "*/k8s/envs/dv/usc1" 2>/dev/null | head -n 1)
if [ -z "$TARGET_PATH" ]; then
    echo "Error: Could not find the required directory structure (k8s/envs/dv/usc1)."
    exit 1
fi

echo "Navigating to: $TARGET_PATH"

# Loop through all app-ids inside usc1
for app_id in "$TARGET_PATH"/*; do
    if [ -d "$app_id/promotable" ]; then
        for folder in "$app_id/promotable"/*; do
            if [ -d "$folder" ]; then
                folder_name=$(basename "$folder")
                
                # Check if folder name contains all parts of the pattern in any order
                match=true
                for word in $pattern; do
                    if [[ "$folder_name" != *$word* ]]; then
                        match=false
                        break
                    fi
                done
                
                if [ "$match" == true ]; then
                    echo "Matching folder: $folder"
                    echo "Listing YAML files inside:"
                    find "$folder" -type f -name "*.yaml"
                fi
            fi
        done
    fi
done

else echo "No such project found." fi





#!/bin/bash

Define API credentials and base URL

API_URL="https://serverstash.server.com/rest/api1.0/projects/ABC/repos" AUTH_TOKEN="BE2234434343CDD" LIMIT=100  # Number of repositories per request START=0    # Pagination start index declare -a REPOS  # Array to store repository names

echo "Fetching all sub-repositories..."

Fetch all repositories

while true; do response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" 
-H "Content-Type: application/json" 
"$API_URL?limit=$LIMIT&start=$START")

for repo_name in $(echo "$response" | jq -r '.values[].name'); do
    echo "$repo_name"
    REPOS+=("$repo_name")  # Store repo in array
done

is_last_page=$(echo "$response" | jq -r '.isLastPage')
if [ "$is_last_page" == "true" ]; then
    break
fi

START=$(echo "$response" | jq -r '.nextPageStart')

done

echo "Total repositories listed: ${#REPOS[@]}"

Ask user for a project name

read -p "Enter the project name you want to search for: " project_name

Check if project exists in the fetched list

if [[ " ${REPOS[@]} " =~ " $project_name " ]]; then echo "Yes, found it!"

# Ask user for pattern input
read -p "Enter the search pattern for folder names: " pattern

# Define base directory path
BASE_PATH="/path/to/repos/$project_name/browse"

if [ ! -d "$BASE_PATH" ]; then
    echo "Error: Base path $BASE_PATH does not exist!"
    exit 1
fi

echo "Building directory structure..."
declare -a DIR_ARRAY
while IFS= read -r -d '' dir; do
    DIR_ARRAY+=("$dir")
done < <(find "$BASE_PATH" -type d -print0)

echo "Searching for relevant paths..."
for dir in "${DIR_ARRAY[@]}"; do
    if [[ "$dir" =~ /k8s/.*?/env/.*?/dv/.*?/usc1/.*?/promotable/ ]]; then
        for folder in "$dir"/*; do
            if [ -d "$folder" ]; then
                folder_name=$(basename "$folder")
                if [[ "$folder_name" == *$pattern* ]]; then
                    echo "Matching folder: $folder"
                    echo "Listing YAML files inside:"
                    find "$folder" -type f -name "*.yaml"
                fi
            fi
        done
    fi
done

else echo "No such project found." fi





#!/bin/bash

Define API credentials and base URL

API_URL="https://serverstash.server.com/rest/api1.0/projects/ABC/repos" AUTH_TOKEN="BE2234434343CDD" LIMIT=100  # Number of repositories per request START=0    # Pagination start index declare -a REPOS  # Array to store repository names

echo "Fetching all sub-repositories..."

Fetch all repositories

while true; do response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" 
-H "Content-Type: application/json" 
"$API_URL?limit=$LIMIT&start=$START")

for repo_name in $(echo "$response" | jq -r '.values[].name'); do
    echo "$repo_name"
    REPOS+=("$repo_name")  # Store repo in array
done

is_last_page=$(echo "$response" | jq -r '.isLastPage')
if [ "$is_last_page" == "true" ]; then
    break
fi

START=$(echo "$response" | jq -r '.nextPageStart')

done

echo "Total repositories listed: ${#REPOS[@]}"

Ask user for a project name

read -p "Enter the project name you want to search for: " project_name

Check if project exists in the fetched list

if [[ " ${REPOS[@]} " =~ " $project_name " ]]; then echo "Yes, found it!"

# Ask user for pattern input
read -p "Enter the search pattern for folder names: " pattern

# Define base directory path
BASE_PATH="/path/to/repos/$project_name/browse/k8s/env/dv/usc1"

if [ ! -d "$BASE_PATH" ]; then
    echo "Error: Base path $BASE_PATH does not exist!"
    exit 1
fi

echo "Searching for folders matching pattern: $pattern"

# Find all matching folders within the promotable directory
find "$BASE_PATH" -type d -path "*/promotable/*" | while read -r folder; do
    folder_name=$(basename "$folder")
    if [[ "$folder_name" == *$pattern* ]]; then
        echo "Matching folder: $folder"
        echo "Listing YAML files inside:"
        find "$folder" -type f -name "*.yaml"
    fi
done

else echo "No such project found." fi





read -p "Do you want to list all files and directories recursively in '$project_name'? (yes/no): " list_files_choice

    if [[ "$list_files_choice" == "yes" ]]; then
        echo "Recursively listing files and directories in '$project_name'..."

        # Function to fetch and list all files and directories recursively
        list_files_recursive() {
            local repo="$1"
            local path="$2"  # Path to scan (starting from root)
            
            # API call to fetch files and folders at the given path
            response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                              -H "Content-Type: application/json" \
                              "https://serverstash.server.com/rest/api1.0/projects/ABC/repos/$repo/browse/$path")

            # Extract and iterate over each item in the directory
            for item in $(echo "$response" | jq -r '.children.values[].path.toString'); do
                echo "$item"

                # If it's a directory, call the function recursively
                is_dir=$(echo "$response" | jq -r ".children.values[] | select(.path.toString==\"$item\") | .directory")
                if [[ "$is_dir" == "true" ]]; then
                    list_files_recursive "$repo" "$item"
                fi
            done
        }

        # Start recursive listing from the root of the repository
        list_files_recursive "$project_name" ""

    else
        echo "Job done."
    fi







read -p "Do you want to list files and directories inside '$project_name'? (yes/no): " list_files_choice

    if [[ "$list_files_choice" == "yes" ]]; then
        echo "Listing files and directories in '$project_name'..."

        # Fetch files and directories inside the repository
        FILES_API_URL="https://serverstash.server.com/rest/api1.0/projects/ABC/repos/$project_name/browse"
        
        response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                          -H "Content-Type: application/json" \
                          "$FILES_API_URL")

        echo "Contents of '$project_name':"
        echo "$response" | jq -r '.children.values[].path.toString'
    else
        echo "Job done."
    fi














#!/bin/bash

# Define API credentials and base URL
API_URL="https://serverstash.server.com/rest/api1.0/projects/ABC/repos"
AUTH_TOKEN="BE2234434343CDD"
LIMIT=100  # Number of repositories per request
START=0    # Pagination start index
COUNT=1    # Counter for numbering repositories
declare -a REPOS  # Array to store repository names

echo "Fetching all sub-repositories..."

# Fetch all repositories
while true; do
    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                      -H "Content-Type: application/json" \
                      "$API_URL?limit=$LIMIT&start=$START")

    # Extract repository names
    for repo_name in $(echo "$response" | jq -r '.values[].name'); do
        echo "$COUNT. $repo_name"
        REPOS+=("$repo_name")  # Store repo in array
        ((COUNT++))
    done

    # Check if there are more pages
    is_last_page=$(echo "$response" | jq -r '.isLastPage')
    if [ "$is_last_page" == "true" ]; then
        break
    fi

    START=$(echo "$response" | jq -r '.nextPageStart')
done

echo "Total repositories listed: $((COUNT - 1))"

# Ask user if they want to provide a project name
echo -e "\nPattern and Config Checker"
read -p "Would you like to specify a project name? (yes/no): " user_choice

if [[ "$user_choice" == "yes" ]]; then
    read -p "Enter project name: " project_name

    # Check if project exists in the fetched list
    if [[ ! " ${REPOS[@]} " =~ " $project_name " ]]; then
        echo "No such project found."
        exit 1
    fi
    echo "Project '$project_name' found!"

    # Get the pattern to search for
    read -p "Enter pattern to search in folder names: " pattern

    echo "Searching inside project '$project_name' for folders matching '$pattern'..."
    # Mocked path for repo directory structure (Modify this based on actual repo path)
    PROJECT_PATH="/repos/$project_name"

    find "$PROJECT_PATH" -type d | grep -E "$(echo "$pattern" | sed 's/\(.\)/\1.*?/g')" || echo "No folders matched the pattern."
else
    # General pattern search in all repositories
    read -p "Enter pattern to search in folder names across all repos: " pattern
    echo "Searching across all repositories for folders matching '$pattern'..."

    # Iterate through each repo and search for the pattern
    for repo in "${REPOS[@]}"; do
        REPO_PATH="/repos/$repo"  # Mock path (Update based on real structure)
        find "$REPO_PATH" -type d | grep -E "$(echo "$pattern" | sed 's/\(.\)/\1.*?/g')" || echo "No matches found in $repo."
    done
fi


-------------------------------------------------------------------------------
#!/bin/bash

# Define API credentials and base URL
API_URL="https://serverstash.server.com/rest/api1.0/projects/ABC/repos"
AUTH_TOKEN="BE2234434343CDD"
LIMIT=100  # Number of repositories to fetch per request
START=0    # Pagination start index
COUNT=1    # Counter for numbering repositories

echo "Fetching all sub-repositories..."

# Loop through pages to fetch all repositories
while true; do
    # Fetch repositories with pagination
    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                      -H "Content-Type: application/json" \
                      "$API_URL?limit=$LIMIT&start=$START")

    # Extract and print only repository names with numbering
    echo "$response" | jq -r '.values[].name' | while read -r repo_name; do
        echo "$COUNT. $repo_name"
        ((COUNT++))
    done

    # Check if there are more pages
    is_last_page=$(echo "$response" | jq -r '.isLastPage')
    if [ "$is_last_page" == "true" ]; then
        break
    fi

    # Update start index for next page
    START=$(echo "$response" | jq -r '.nextPageStart')
done

echo "Total repositories listed: $((COUNT - 1))"
