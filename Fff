#!/bin/bash

# Define API credentials and base URL
API_URL="https://serverstash.server.com/rest/api1.0/projects/ABC/repos"
AUTH_TOKEN="BE2234434343CDD"
LIMIT=600  # Number of repositories per request
START=0    # Pagination start index
declare -a REPOS  # Array to store repository names

echo "Fetching all sub-repositories..."

# Fetch all repositories
while true; do
    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                      -H "Content-Type: application/json" \
                      "$API_URL?limit=$LIMIT&start=$START")

    # Extract repository names and store in an array
    repo_list=($(echo "$response" | jq -r '.values[].name'))
    REPOS+=("${repo_list[@]}")  # Append to REPOS array

    # Check if there are more pages
    is_last_page=$(echo "$response" | jq -r '.isLastPage')
    if [ "$is_last_page" == "true" ]; then
        break
    fi

    START=$(echo "$response" | jq -r '.nextPageStart')
done

# Display fetched repositories
for i in "${!REPOS[@]}"; do
    echo "$((i + 1)). ${REPOS[i]}"
done

echo "Total repositories listed: ${#REPOS[@]}"

# Ask user for a project name
read -p "Enter the project name you want to search for: " project_name

# Check if project exists in the array using a loop
found=false
for repo in "${REPOS[@]}"; do
    if [[ "$repo" == "$project_name" ]]; then
        found=true
        break
    fi
done

if [[ "$found" == true ]]; then
    echo "Yes, found it!"

    # Ask for pattern input
    read -p "Enter the directory name pattern to search for: " pattern

    echo "Navigating to '$project_name/browse/k8s/envs/dv/usc1/'..."

    # Recursive DFS function to search directories dynamically
    function dfs_search {
        local path="$1"

        # Fetch directory contents
        response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                          -H "Content-Type: application/json" \
                          "$API_URL/$project_name/browse/$path")

        # Check for errors (e.g., path does not exist)
        if echo "$response" | jq -e '.errors' > /dev/null; then
            echo "Skipping: '$path' (not found)"
            return
        fi

        # Extract all subdirectories
        subdirs=($(echo "$response" | jq -r '.children.values[] | select(.directory == true) | .path.toString'))

        # Recursively explore each subdirectory
        for subdir in "${subdirs[@]}"; do
            full_path="$path/$subdir"
            echo "Checking: $full_path"

            # Check if this subdirectory is the "promotable" folder
            promotable_path="$full_path/promotable"

            # Fetch promotable directory contents
            promo_response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                                   -H "Content-Type: application/json" \
                                   "$API_URL/$project_name/browse/$promotable_path")

            # If 'promotable' exists, check for pattern match
            if ! echo "$promo_response" | jq -e '.errors' > /dev/null; then
                if [[ "$subdir" =~ $pattern ]]; then
                    echo "Match found: $API_URL/$project_name/browse/$promotable_path"
                fi
            fi

            # Recursive DFS call to go deeper into the hierarchy
            dfs_search "$full_path"
        done
    }

    # Start DFS search from the base path
    dfs_search "k8s/envs/dv/usc1"

else
    echo "No such project found."
fi
