import subprocess
import time
import os
import re
import threading
from flask import Flask, render_template, request, jsonify

app = Flask(__name__)

# Global variable to store fetched repositories
repos_list = []

# Function to run shell script and fetch repositories
def fetch_repositories():
    global repos_list
    
    script_path = "fetch_repos.sh"
    process = subprocess.Popen(["bash", script_path], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    output, error = process.communicate()
    
    if error:
        print(f"Error fetching repositories: {error}")
    
    repos_list = [line.split(". ", 1)[1] for line in output.splitlines() if re.match(r'^[0-9]+\. ', line)]
    print("Repositories fetched successfully.")

# Start fetching repos in a background thread
threading.Thread(target=fetch_repositories, daemon=True).start()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/search', methods=['POST'])
def search():
    project_name = request.form.get('project_name', '').strip()
    pattern = request.form.get('pattern', '').strip()
    
    if not pattern:
        return jsonify({"error": "Pattern is required"}), 400
    
    # Check if project exists
    if project_name and project_name not in repos_list:
        return jsonify({"error": "Project not found"}), 404
    
    # Run shell command to list files
    repo_files = subprocess.run(
        ["bash", "fetch_repos.sh"], capture_output=True, text=True
    ).stdout
    
    # Search for pattern in the fetched file list
    matching_files = [line for line in repo_files.splitlines() if re.search(pattern, line, re.IGNORECASE)]
    
    return jsonify({"matches": matching_files})

if __name__ == '__main__':
    app.run(debug=True)
