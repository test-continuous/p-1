#!/bin/bash

# Define API credentials and base URL
API_URL="https://serverstash.server.com/rest/api1.0/projects/ABC/repos"
AUTH_TOKEN="BE2234434343CDD"
LIMIT=600  # Number of repositories per request
START=0    # Pagination start index
declare -A REPO_MAP  # HashMap to store repository names

echo "Fetching all repositories..."

# Fetch all repositories using pagination
while true; do
    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                      -H "Content-Type: application/json" \
                      "$API_URL?limit=$LIMIT&start=$START")

    # Extract repository names and normalize to lowercase
    repo_names=$(echo "$response" | jq -r '.values[].name' | tr '[:upper:]' '[:lower:]')
    
    for repo_name in $repo_names; do
        repo_name=$(echo "$repo_name" | xargs)  # Trim spaces
        REPO_MAP["$repo_name"]=1  # Store repo in HashMap
    done

    # Handle pagination
    is_last_page=$(echo "$response" | jq -r '.isLastPage')
    if [[ "$is_last_page" == "true" ]]; then
        break
    fi

    START=$(echo "$response" | jq -r '.nextPageStart // empty')
    if [[ -z "$START" ]]; then
        break
    fi
done

echo "Total repositories fetched: ${#REPO_MAP[@]}"

# Read project name input and normalize it
read -p "Enter the project name you want to search for: " project_name
project_name=$(echo "$project_name" | tr '[:upper:]' '[:lower:]' | xargs)

# Check if project exists in HashMap
if [[ -v REPO_MAP["$project_name"] ]]; then
    echo "Yes, project '$project_name' found!"
else
    echo "No such project found."
    exit 1
fi

# Ask for pattern input
read -p "Enter the directory name pattern to search for: " pattern

echo "Navigating to '$project_name/browse/k8s/envs/dv/usc1/'..."

# DFS function to search directories recursively
function dfs_search {
    local path="$1"
    
    # Fetch directory contents
    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                      -H "Content-Type: application/json" \
                      "$API_URL/$project_name/browse/$path")

    # Check if the path exists
    if echo "$response" | jq -e '.errors' > /dev/null; then
        echo "Skipping: '$path' (not found)"
        return
    fi

    # Extract all subdirectories
    subdirs=($(echo "$response" | jq -r '.children.values[] | select(.directory == true) | .path.toString'))

    # Iterate through subdirectories
    for subdir in "${subdirs[@]}"; do
        promotable_path="$path/$subdir/promotable"

        # Fetch promotable directory contents
        response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                          -H "Content-Type: application/json" \
                          "$API_URL/$project_name/browse/$promotable_path")

        # Skip if 'promotable' directory does not exist
        if echo "$response" | jq -e '.errors' > /dev/null; then
            continue
        fi

        # Check if the pattern matches
        if [[ "$subdir" =~ $pattern ]]; then
            echo "Match found: $API_URL/$project_name/browse/$promotable_path"
        fi

        # Recursive DFS call
        dfs_search "$path/$subdir"
    done
}

# Start DFS search from the base path
dfs_search "k8s/envs/dv/usc1"
