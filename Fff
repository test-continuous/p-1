#!/bin/bash

# Define API credentials and base URL
API_URL="https://serverstash.server.com/rest/api1.0/projects/ABC/repos"
AUTH_TOKEN="BE2234434343CDD"
LIMIT=100  # Number of repositories per request
START=0    # Pagination start index
COUNT=1    # Counter for numbering repositories
declare -a REPOS  # Array to store repository names

echo "Fetching all sub-repositories..."

# Fetch all repositories
while true; do
    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                     -H "Content-Type: application/json" \
                     "$API_URL?limit=$LIMIT&start=$START")

    # Extract repository names
    for repo_name in $(echo "$response" | jq -r '.values[].name'); do
        echo "$COUNT. $repo_name"
        REPOS+=("$repo_name")  # Store repo in array
        ((COUNT++))
    done

    # Check if there are more pages
    is_last_page=$(echo "$response" | jq -r '.isLastPage')
    if [ "$is_last_page" == "true" ]; then
        break
    fi

    START=$(echo "$response" | jq -r '.nextPageStart')
done

echo "Total repositories listed: $((COUNT - 1))"

# Ask user for a project name
read -p "Enter the project name you want to explore: " project_name

# Check if project exists in the fetched list
if [[ " ${REPOS[@]} " =~ " $project_name " ]]; then
    echo "Yes, found it!"

    # Function to fetch and list files/directories at a given path
    list_files_recursive() {    
        local repo="$1"    
        local path="$2"  # Path to scan (starting from root)    

        # API call to fetch files and folders at the given path    
        response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \    
                          -H "Content-Type: application/json" \    
                          "$API_URL/$repo/browse/$path")    

        # Extract and iterate over each item in the directory    
        local items=($(echo "$response" | jq -r '.children.values[].path.toString'))    
        local dirs=()    

        echo "Contents of '$path' in repository '$repo':"
        for item in "${items[@]}"; do    
            is_dir=$(echo "$response" | jq -r ".children.values[] | select(.path.toString==\"$item\") | .directory")    
            if [[ "$is_dir" == "true" ]]; then    
                echo "[DIR]  $item"
                dirs+=("$item")
            else
                echo "       $item"
            fi    
        done    

        # Ask user if they want to go deeper into a directory
        if [[ ${#dirs[@]} -gt 0 ]]; then
            while true; do
                read -p "Enter a directory name to explore further (or 'exit' to stop): " choice
                if [[ "$choice" == "exit" ]]; then
                    break
                elif [[ " ${dirs[@]} " =~ " $choice " ]]; then
                    list_files_recursive "$repo" "$choice"
                else
                    echo "Invalid choice. Please enter a valid directory name."
                fi
            done
        fi
    }    

    # Start listing from the root of the repository
    list_files_recursive "$project_name" ""

else
    echo "No such project found."
fi
