#!/bin/bash

# Define API credentials and base URL
API_URL="https://serverstash.server.com/rest/api1.0/projects/ABC/repos"
AUTH_TOKEN="BE2234434343CDD"
LIMIT=600  # Number of repositories per request
START=0    # Pagination start index
COUNT=1    # Counter for numbering repositories
declare -A REPO_MAP  # HashMap for fast repository lookup

echo "Fetching all sub-repositories..."

# Fetch all repositories with pagination
while true; do
    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                      -H "Content-Type: application/json" \
                      "$API_URL?limit=$LIMIT&start=$START")

    # Extract repository names and store in HashMap
    repo_names=$(echo "$response" | jq -r '.values[].name')
    
    for repo_name in $repo_names; do
        echo "$COUNT. $repo_name"
        REPO_MAP["$repo_name"]=1  # Store repo in HashMap for O(1) lookup
        ((COUNT++))
    done

    # Check if this is the last page
    is_last_page=$(echo "$response" | jq -r '.isLastPage')
    if [[ "$is_last_page" == "true" ]]; then
        break
    fi

    # Update START only if nextPageStart exists
    START=$(echo "$response" | jq -r '.nextPageStart // empty')
    if [[ -z "$START" ]]; then
        break
    fi
done

echo "Total repositories listed: $((COUNT - 1))"

# Ask user for a project name
read -p "Enter the project name you want to search for: " project_name

# Check if project exists in the fetched list
if [[ -n "${REPO_MAP[$project_name]}" ]]; then
    echo "Yes, found it!"

    # Ask for pattern input
    read -p "Enter the directory name pattern to search for: " pattern

    echo "Navigating to '$project_name/browse/k8s/envs/dv/usc1/'..."

    # Recursive DFS function to search directories dynamically
    function dfs_search {
        local path="$1"
        
        # Fetch directory contents
        response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                          -H "Content-Type: application/json" \
                          "$API_URL/$project_name/browse/$path")

        # Check for errors (e.g., path does not exist)
        if echo "$response" | jq -e '.errors' > /dev/null; then
            echo "Skipping: '$path' (not found)"
            return
        fi

        # Extract all subdirectories
        subdirs=($(echo "$response" | jq -r '.children.values[] | select(.directory == true) | .path.toString'))

        # Check for pattern match in the "promotable" folder
        for subdir in "${subdirs[@]}"; do
            promotable_path="$path/$subdir/promotable"

            # Fetch promotable directory contents
            response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                              -H "Content-Type: application/json" \
                              "$API_URL/$project_name/browse/$promotable_path")

            # Skip if 'promotable' directory does not exist
            if echo "$response" | jq -e '.errors' > /dev/null; then
                continue
            fi

            # Check if the pattern matches
            if [[ "$subdir" =~ $pattern ]]; then
                echo "Match found: $API_URL/$project_name/browse/$promotable_path"
            fi

            # Recursive DFS call
            dfs_search "$path/$subdir"
        done
    }

    # Start DFS search from the base path
    dfs_search "k8s/envs/dv/usc1"

else
    echo "No such project found."
fi
