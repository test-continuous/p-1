#!/bin/bash

# Define API credentials and base URL
API_URL="https://serverstash.server.com/rest/api1.0/projects/ABC/repos"
AUTH_TOKEN="BE2234434343CDD"
LIMIT=600  # Number of repositories per request
START=0    # Pagination start index
COUNT=1    # Counter for numbering repositories
declare -a REPOS  # Array to store repository names

echo "Fetching all sub-repositories..."

# Fetch all repositories
while true; do
    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                      -H "Content-Type: application/json" \
                      "$API_URL?limit=$LIMIT&start=$START")

    # Extract repository names
    for repo_name in $(echo "$response" | jq -r '.values[].name'); do
        echo "$COUNT. $repo_name"
        REPOS+=("$repo_name")  # Store repo in array
        ((COUNT++))
    done

    # Check if there are more pages
    is_last_page=$(echo "$response" | jq -r '.isLastPage')
    if [ "$is_last_page" == "true" ]; then
        break
    fi

    START=$(echo "$response" | jq -r '.nextPageStart')
done

echo "Total repositories listed: $((COUNT - 1))"

# Ask user for a project name
read -p "Enter the project name you want to search for: " project_name

# Check if project exists in the fetched list
if [[ " ${REPOS[@]} " =~ " $project_name " ]]; then
    echo "Yes, found it!"

    # Ask for pattern input
    read -p "Enter the directory name pattern to search for: " pattern

    echo "Searching for directories matching '$pattern' in '$project_name'..."

    # Function to perform BFS traversal and find directories matching the pattern
    search_pattern_recursive() {
        local repo="$1"
        local path="$2"
        
        # Fetch directory contents
        response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                          -H "Content-Type: application/json" \
                          "https://serverstash.server.com/rest/api1.0/projects/ABC/repos/$repo/browse/$path")

        # Iterate over items
        for item in $(echo "$response" | jq -r '.children.values[].path.toString'); do
            is_dir=$(echo "$response" | jq -r ".children.values[] | select(.path.toString==\"$item\") | .directory")
            
            if [[ "$is_dir" == "true" ]]; then
                # Check if directory name matches pattern
                if [[ "$item" =~ $pattern ]]; then
                    echo "Match found: $item"
                fi
                # Recur for subdirectories
                search_pattern_recursive "$repo" "$item"
            fi
        done
    }

    # Start searching from the root
    search_pattern_recursive "$project_name" ""
else
    echo "No such project found."
fi
