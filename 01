from flask import Flask, render_template, request, session, jsonify
from google.cloud import storage
import threading

app = Flask(__name__)
app.secret_key = "your_secret_key"  # Required for session storage

BUCKET_NAME = "app_dr_checkout"

def fetch_and_store_data(environment, region):
    """Fetches all HTML content for an environment-region combo and stores in session."""
    client = storage.Client()
    bucket = client.bucket(BUCKET_NAME)
    data_cache = {}

    # Fetch all available dates in the environment/region
    for blob in bucket.list_blobs(prefix=f"{environment}/{region}/"):
        parts = blob.name.split('/')
        if len(parts) >= 3 and blob.name.endswith('.html'):
            date = parts[2]  # Extract date
            app_id = parts[3]  # Extract app ID
            file_name = parts[-1]  # Extract file name
            
            if date not in data_cache:
                data_cache[date] = {}

            # Store blob content in cache
            data_cache[date][app_id] = bucket.blob(blob.name).download_as_text()

    session[f"{environment}_{region}_data"] = data_cache  # Store in session

@app.route('/results', methods=['GET'])
def results():
    """Handles fetching and rendering results efficiently."""
    environment = request.args.get('environment')
    region = request.args.get('region')
    date = request.args.get('date')

    if not environment or not region or not date:
        return "Invalid selection", 400

    # Fetch all data in background if not already fetched
    if f"{environment}_{region}_data" not in session:
        thread = threading.Thread(target=fetch_and_store_data, args=(environment, region))
        thread.start()  # Run fetching in background

    # Retrieve cached data for selected date
    cached_data = session.get(f"{environment}_{region}_data", {}).get(date, {})

    return render_template("results.html", details=cached_data, environment=environment, region=region, date=date)
