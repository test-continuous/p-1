from flask import Flask, request, jsonify
from google.cloud import storage

app = Flask(__name__)
bucket_name = "your-bucket-name"

client = storage.Client()

def list_folders(prefix):
    """List unique folder names inside a given prefix"""
    blobs = client.list_blobs(bucket_name, prefix=prefix, delimiter='/')
    return [prefix.split('/')[-2] for prefix in blobs.prefixes if prefix]

@app.route('/get-environments', methods=['GET'])
def get_environments():
    """Fetch available environments"""
    environments = list_folders("")
    return jsonify({"environments": environments})

@app.route('/get-regions', methods=['GET'])
def get_regions():
    """Fetch available regions for a selected environment"""
    environment = request.args.get('env')
    if not environment:
        return jsonify({"error": "Missing environment parameter"}), 400
    regions = list_folders(f"{environment}/")
    return jsonify({"regions": regions})

@app.route('/get-dates', methods=['GET'])
def get_dates():
    """Fetch available dates for a selected environment and region"""
    environment = request.args.get('env')
    region = request.args.get('region')
    if not environment or not region:
        return jsonify({"error": "Missing parameters"}), 400
    dates = list_folders(f"{environment}/{region}/")
    return jsonify({"dates": dates})

if __name__ == '__main__':
    app.run(debug=True)




<select id="environment" onchange="fetchRegions()">
  <option value="">Select Environment</option>
</select>

<select id="region" onchange="fetchDates()" disabled>
  <option value="">Select Region</option>
</select>

<select id="date" disabled>
  <option value="">Select Date</option>
</select>

<script>
async function fetchDropdown(url, elementId) {
  const response = await fetch(url);
  const data = await response.json();
  const select = document.getElementById(elementId);
  select.innerHTML = '<option value="">Select</option>' + data[elementId].map(val => `<option value="${val}">${val}</option>`).join('');
  select.disabled = false;
}

function fetchRegions() {
  const env = document.getElementById("environment").value;
  document.getElementById("region").disabled = true;
  document.getElementById("date").disabled = true;
  if (env) fetchDropdown(`/get-regions?env=${env}`, "region");
}

function fetchDates() {
  const env = document.getElementById("environment").value;
  const region = document.getElementById("region").value;
  document.getElementById("date").disabled = true;
  if (env && region) fetchDropdown(`/get-dates?env=${env}&region=${region}`, "date");
}

// Load environments initially
fetchDropdown("/get-environments", "environment");
</script>
