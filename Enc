#!/bin/bash

# API Credentials
API_URL="https://serverstash.server.com/rest/api1.0/projects/ABC/repos"
AUTH_TOKEN="BE2234434343CDD"
LIMIT=100
START=0
COUNT=1
declare -a REPOS

# Function to search inside folders recursively
function search_in_directory {
    local project_name="$1"
    local base_path="$2"
    local pattern="$3"

    echo "Searching under: $API_URL/$project_name/browse/$base_path"

    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                      -H "Content-Type: application/json" \
                      "$API_URL/$project_name/browse/$base_path")

    if [[ "$response" == *"errors"* ]]; then
        echo "Skipping: $base_path (not found)"
        return
    fi

    # Extract directories manually
    directories=($(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'))

    for dir in "${directories[@]}"; do
        full_path="$base_path/$dir"
        
        # Check if the folder matches the pattern
        if [[ "$dir" == *"$pattern"* ]]; then
            echo "Match found: $API_URL/$project_name/browse/$full_path"
        fi
        
        # Recursively search inside this folder
        search_in_directory "$project_name" "$full_path" "$pattern"
    done
}

# Function to explore all directories inside k8s/envs/pr/
function search_pr_folders {
    local project_name="$1"
    local pattern="$2"
    local base_path="k8s/envs/pr"

    echo "Fetching data from: $API_URL/$project_name/browse/$base_path"

    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                      -H "Content-Type: application/json" \
                      "$API_URL/$project_name/browse/$base_path")

    if [[ "$response" == *"errors"* ]]; then
        echo "Base path does not exist: $base_path"
        return
    fi

    # Extract all directories inside k8s/envs/pr/
    folders=($(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'))

    for folder in "${folders[@]}"; do
        folder_path="$base_path/$folder"
        echo "Exploring: $folder_path"

        # Perform Recursive Search inside the folder
        search_in_directory "$project_name" "$folder_path" "$pattern"
    done
}

# Fetch all repositories
echo "Fetching all sub-repositories..."

while true; do
    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                      -H "Content-Type: application/json" \
                      "$API_URL?limit=$LIMIT&start=$START")

    for repo_name in $(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'); do
        echo "$COUNT. $repo_name"
        REPOS+=("$repo_name")
        ((COUNT++))
    done

    is_last_page=$(echo "$response" | grep -o '"isLastPage":true')

    if [ -n "$is_last_page" ]; then
        break
    fi

    START=$(echo "$response" | grep -o '"nextPageStart":[0-9]*' | sed 's/"nextPageStart"://')
done

echo "Total repositories listed: $((COUNT - 1))"

read -p "Enter the project name you want to search for: " project_name

if [[ " ${REPOS[@]} " =~ " $project_name " ]]; then
    echo "Yes, found it!"
    
    read -p "Enter the pattern to search inside 'k8s/envs/pr' folder: " pattern

    search_pr_folders "$project_name" "$pattern"
else
    echo "No such project found."
fi
