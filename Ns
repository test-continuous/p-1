#!/bin/bash

Define API credentials and base URL

API_URL="https://serverstash.server.com/rest/api1.0/projects" AUTH_TOKEN="BE2234434343CDD" LIMIT=100 START=0 COUNT=1

Declare an array for repositories

declare -a REPOS

echo "Fetching all repositories..." while true; do response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" 
-H "Content-Type: application/json" 
"$API_URL?limit=$LIMIT&start=$START")

for repo_name in $(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'); do
    echo "$COUNT. $repo_name"
    REPOS+=("$repo_name")
    ((COUNT++))
done

is_last_page=$(echo "$response" | grep -o '"isLastPage":true')
if [ -n "$is_last_page" ]; then
    break
fi

START=$(echo "$response" | grep -o '"nextPageStart":[0-9]*' | sed 's/"nextPageStart"://')

done

echo "Total repositories listed: $((COUNT - 1))"

Ask for the number of projects to search

read -p "Enter the number of projects you want to search: " num_projects

declare -a PROJECTS for ((i=1; i<=num_projects; i++)); do read -p "Enter project name $i: " project_name if [[ " ${REPOS[@]} " =~ " $project_name " ]]; then PROJECTS+=("$project_name") else echo "Project $project_name not found. Skipping..." fi done

Ask for the input pattern

read -p "Enter the pattern to search inside YAML files: " pattern

Required content patterns (either of these should exist)

REQUIRED_PAIRS=("-name: value1" "-value: value1" "-name: value2" "-value: value2")

Function to check if the file contains required content

function check_file_content { local file_url="$1"

file_content=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" "$file_url")

for ((i=0; i<${#REQUIRED_PAIRS[@]}; i+=2)); do
    if [[ "$file_content" == *"${REQUIRED_PAIRS[i]}"* && "$file_content" == *"${REQUIRED_PAIRS[i+1]}"* ]]; then
        echo "✅ Content Available: $file_url"
        return
    fi
done
echo "❌ Content Not Available: $file_url"

}

Function to search YAML files

function search_in_directory { local project_name="$1" local base_path="$2"

response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" "$API_URL/$project_name/browse/$base_path")

if [[ "$response" == *"errors"* ]]; then
    return
fi

items=($(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'))

for item in "${items[@]}"; do
    full_path="$base_path/$item"
    
    if [[ "$item" == *"$pattern"* && "$item" =~ \.ya?ml$ ]]; then
        file_url="$API_URL/$project_name/browse/$full_path"
        file_content=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" "$file_url")
        
        if [[ "$file_content" == *"statefulset"* ]]; then
            check_file_content "$file_url"
        fi
    fi
    
    if [[ ! "$item" =~ \. ]]; then
        search_in_directory "$project_name" "$full_path" &
    fi
done
wait

}

Search in all provided projects

for project in "${PROJECTS[@]}"; do search_in_directory "$project" "k8s/envs/pr" done
