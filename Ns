#!/bin/bash

echo "Fetching all sub-repositories..."

START=0
LIMIT=100  # Adjust as needed
REPOS=()
COUNT=1

while true; do
    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                      -H "Content-Type: application/json" \
                      "$API_URL?limit=$LIMIT&start=$START")

    # Extract repository names
    for repo_name in $(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'); do
        REPOS+=("$repo_name")
        ((COUNT++))
    done

    # Check if it's the last page
    is_last_page=$(echo "$response" | grep -o '"isLastPage":true')

    if [ -n "$is_last_page" ]; then
        break
    fi

    # Get next start index
    START=$(echo "$response" | grep -o '"nextPageStart":[0-9]*' | sed 's/"nextPageStart"://')
done

echo "Total repositories listed: $((COUNT - 1))"

# Ask user for the number of projects to search
read -p "Enter the number of projects you want to search: " num_projects

PROJECTS=()
for ((i = 1; i <= num_projects; i++)); do
    read -p "Enter project name $i: " project_name
    if [[ " ${REPOS[@]} " =~ " $project_name " ]]; then
        PROJECTS+=("$project_name")
    else
        echo "❌ No such project found: $project_name"
    fi
done

# If no valid projects found, exit
if [ ${#PROJECTS[@]} -eq 0 ]; then
    echo "❌ No valid projects to search. Exiting..."
    exit 1
fi

# Ask user for the pattern to search
read -p "Enter the pattern to search inside 'k8s/envs/pr' folder: " pattern

# Search for the pattern in each valid project
for project_name in "${PROJECTS[@]}"; do
    echo "🔍 Searching in project: $project_name"
    search_pr_folders "$project_name" "$pattern"
done


******
function check_yaml_content {
    local project_name="$1"
    local file_path="$2"
    local file_url="$API_URL/$project_name/browse/$file_path"

    # Fetch file content
    file_content=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                          -H "Content-Type: application/json" \
                          "$file_url")

    # Check if file contains 'statefulset'
    if [[ "$file_content" != *"statefulset"* ]]; then
        return
    fi

    # Define two sets of required pairs
    declare -a required_pairs_one=(
        "- name: value1" "- value: value1"
        "- name: value2" "- value: value2"
        "- name: value3" "- value: value3"
    )

    declare -a required_pairs_two=(
        "- name: value4" "- value: value4"
        "- name: value5" "- value: value5"
        "- name: value6" "- value: value6"
    )

    # Function to check if all pairs in a set exist in the file
    function check_pair_set {
        local -n pairs=$1  # Use nameref for array
        for pair in "${pairs[@]}"; do
            if [[ "$file_content" != *"$pair"* ]]; then
                return 1  # Set is not fully present
            fi
        done
        return 0  # Set is fully present
    }

    # Check if either set is fully present
    if check_pair_set required_pairs_one || check_pair_set required_pairs_two; then
        echo "✅ Content Available: $file_url"
    else
        echo "❌ Content Not Available: $file_url"
    fi
}

function search_in_directory {
    local project_name="$1"
    local base_path="$2"
    local pattern="$3"

    echo "Searching under: $API_URL/$project_name/browse/$base_path"

    # Fetch folder & file list **only once** to reduce API calls
    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                      -H "Content-Type: application/json" \
                      "$API_URL/$project_name/browse/$base_path")

    if [[ "$response" == *"errors"* ]]; then
        echo "Skipping: $base_path (not found)"
        return
    fi

    # Extract directory and file names **efficiently**
    items=($(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'))

    for item in "${items[@]}"; do
        full_path="$base_path/$item"

        # Check if the item is a **YAML file** and matches the pattern
        if [[ "$item" == *"$pattern"* ]] && [[ "$item" =~ \.ya?ml$ ]]; then
            check_yaml_content "$project_name" "$full_path"
        fi
        
        # If it's a directory, recursively search inside it (Run in Parallel)
        if [[ ! "$item" =~ \. ]]; then
            search_in_directory "$project_name" "$full_path" "$pattern" &
        fi
    done

    # Wait for all background jobs before returning
    wait
}

function search_pr_folders {
    local project_name="$1"
    local pattern="$2"
    local base_path="k8s/envs/pr"

    echo "Fetching data from: $API_URL/$project_name/browse/$base_path"

    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                      -H "Content-Type: application/json" \
                      "$API_URL/$project_name/browse/$base_path")

    if [[ "$response" == *"errors"* ]]; then
        echo "Base path does not exist: $base_path"
        return
    fi

    # Extract all first-level folders
    folders=($(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'))

    for folder in "${folders[@]}"; do
        folder_path="$base_path/$folder"
        echo "🔍 Exploring: $folder_path"

        # Recursively search **in parallel** for each folder
        search_in_directory "$project_name" "$folder_path" "$pattern" &
    done

    # Wait for all parallel jobs
    wait
}


#!/bin/bash

Define API credentials and base URL

API_URL="https://serverstash.server.com/rest/api1.0/projects" AUTH_TOKEN="BE2234434343CDD" LIMIT=100 START=0 COUNT=1

Declare an array for repositories

declare -a REPOS

echo "Fetching all repositories..." while true; do response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" 
-H "Content-Type: application/json" 
"$API_URL?limit=$LIMIT&start=$START")

for repo_name in $(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'); do
    echo "$COUNT. $repo_name"
    REPOS+=("$repo_name")
    ((COUNT++))
done

is_last_page=$(echo "$response" | grep -o '"isLastPage":true')
if [ -n "$is_last_page" ]; then
    break
fi

START=$(echo "$response" | grep -o '"nextPageStart":[0-9]*' | sed 's/"nextPageStart"://')

done

echo "Total repositories listed: $((COUNT - 1))"

Ask for the number of projects to search

read -p "Enter the number of projects you want to search: " num_projects

declare -a PROJECTS for ((i=1; i<=num_projects; i++)); do read -p "Enter project name $i: " project_name if [[ " ${REPOS[@]} " =~ " $project_name " ]]; then PROJECTS+=("$project_name") else echo "Project $project_name not found. Skipping..." fi done

Ask for the input pattern

read -p "Enter the pattern to search inside YAML files: " pattern

Required content patterns (either of these should exist)

REQUIRED_PAIRS=("-name: value1" "-value: value1" "-name: value2" "-value: value2")

Function to check if the file contains required content

function check_file_content { local file_url="$1"

file_content=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" "$file_url")

for ((i=0; i<${#REQUIRED_PAIRS[@]}; i+=2)); do
    if [[ "$file_content" == *"${REQUIRED_PAIRS[i]}"* && "$file_content" == *"${REQUIRED_PAIRS[i+1]}"* ]]; then
        echo "✅ Content Available: $file_url"
        return
    fi
done
echo "❌ Content Not Available: $file_url"

}

Function to search YAML files

function search_in_directory { local project_name="$1" local base_path="$2"

response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" "$API_URL/$project_name/browse/$base_path")

if [[ "$response" == *"errors"* ]]; then
    return
fi

items=($(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'))

for item in "${items[@]}"; do
    full_path="$base_path/$item"
    
    if [[ "$item" == *"$pattern"* && "$item" =~ \.ya?ml$ ]]; then
        file_url="$API_URL/$project_name/browse/$full_path"
        file_content=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" "$file_url")
        
        if [[ "$file_content" == *"statefulset"* ]]; then
            check_file_content "$file_url"
        fi
    fi
    
    if [[ ! "$item" =~ \. ]]; then
        search_in_directory "$project_name" "$full_path" &
    fi
done
wait

}

Search in all provided projects

for project in "${PROJECTS[@]}"; do search_in_directory "$project" "k8s/envs/pr" done
